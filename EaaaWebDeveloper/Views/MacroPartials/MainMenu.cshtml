@inherits Umbraco.Web.Macros.PartialViewMacroPage


@using Umbraco.Web
@using Umbraco.Web.Models
@using Umbraco.Web.Controllers
@using System.Web.Mvc.Html
@using ClientDependency.Core.Mvc

@{
    Layout = null;
    // Used to get Level 2 children
    var root = CurrentPage.AncestorsOrSelf(1).First();
    // Used if there is children for Ansestorsorself's children
    var dropdownData = "class=dropdown-toggle data-toggle=dropdown role=button aria-haspopup=true aria-expanded=false";
    var caret = "<span class='caret'></span>";
    //Else
    var srOnly = "<span class='sr - only'></span>";
    //


}
<nav class="navbar navbar-inverse navbar-fixed-top">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="@root.Url">@root.Name</a>
        </div>
        
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                @foreach (var menuItem in root.Children.Where("Visible"))
                {
                    var isProtected = umbraco.library.IsProtected(menuItem.id, menuItem.path);
                    var loginAccess = umbraco.library.IsProtected(menuItem.id, menuItem.path) && umbraco.library.HasAccess(menuItem.id, menuItem.path);
                    if (!isProtected || loginAccess)
                    {
                    <li class="@(menuItem.IsAncestorOrSelf(CurrentPage) ? "active" : null)  @(menuItem.Children.Where("Visible").Count() > 0 ? "dropdown" : null)">

                        <a href="@(menuItem.Children.Where("Visible").Count() > 0 && menuItem.Where("DisplayDropdown") ? "#" : @menuItem.Url)" @(menuItem.Children.Where("Visible").Count() > 0 && menuItem.Where("DisplayDropdown") ? dropdownData : null)>
                            @menuItem.Name @(menuItem.Children.Where("Visible").Count() > 0 && menuItem.Where("DisplayDropdown") ? Html.Raw(caret) : Html.Raw(srOnly))
                        </a>
                        
                        @if (menuItem.Children.Where("Visible").Count() > 0 && menuItem.Where("DisplayDropdown"))
                        {
                            <ul class="dropdown-menu">
                                @foreach (var menuItem2 in menuItem.Children.Where("Visible"))
                                {
                                    <li class="@(menuItem.IsAncestorOrSelf(CurrentPage) ? "active" : null)"><a href="@menuItem2.Url" >@menuItem2.Name @Html.Raw(srOnly)</a></li>
                                }
                            </ul>
                        }
                    </li>
                    }

                }
            </ul>
            <ul class="nav navbar-nav navbar-right">
                @if (Members.GetCurrentLoginStatus().IsLoggedIn)
                {
                    @Html.Partial("Logout")
                }
                else
                {
                    <li>
                        <a href="/register">Register</a>
                    </li>
                    <li>
                        <div class="Plogin-Form-adjust">
                            @Html.Partial("Plogin")
                        </div>
                    </li>
                }
                
            </ul>
        </div>
    </div>
</nav>


            
